""" Tests for send email of email_gateway app. """
import logging

from django.conf import settings
from django.core import mail
from django.core.urlresolvers import reverse

from common.test_utils import EnhancedTestCase
from email_gateway.send import send_email
from market.models import Site

LOG = logging.getLogger('ten.%s' % __name__)
LOG.setLevel(logging.DEBUG)

class TestEmailFilterSettings(EnhancedTestCase):
    """ Test send_email based on settings.LIVE_EMAIL_DOMAINS being populated in
    the environment's settings file. Production will not have this list 
    populated. When populated for example on dev, only emails sent to 
    @10coupons.com and @strausdigital.com will be sent).
    """
    urls = 'urls_local.urls_2'
    
    def prep_and_send_email(self, email):
        """ Populate email domain list to prohibit unwanted emails
        from being sent.
        """
        settings.LIVE_EMAIL_DOMAINS = ['@strausdigital.com', '@10coupons.com']
        self.assertEqual(len(mail.outbox), 0)
        post_data = {'email': email, 'consumer_zip_postal': '12550'}
        self.client.post(reverse('all-coupons'), post_data, follow=True)
        return

    def test_sendable_email(self):
        """ Test that email is sendable if it is a white-listed domain. """
        email = 'developer-test@10coupons.com'
        self.prep_and_send_email(email)
        self.assertTrue('@10coupons.com' in settings.LIVE_EMAIL_DOMAINS)
        self.assertEqual(len(mail.outbox), 1)
        settings.LIVE_EMAIL_DOMAINS = []

    def test_email_denied(self):
        """ Test sending an email not white-listed. """
        email = 'developer@hotmail.com'
        self.prep_and_send_email(email)
        self.assertTrue('@hotmail.com' not in settings.LIVE_EMAIL_DOMAINS)
        self.assertEqual(len(mail.outbox), 0)
        settings.LIVE_EMAIL_DOMAINS = []


def build_common_context(specifics):
    """ Build keys commonly found in the context for emails generated by 
    tests of TestEmailDisplayHeaders class. 
    """
    site = Site.objects.get(id=2)
    context = {
        'subject': 'IMPORTANT - Get your Coupons',
        'from_address': 'Coupons', 
        'ref_num': 141,
        'contest_is_running': True,
        'site': site}
    context.update(specifics)
    return context, site


class TestEmailDisplayHeaders(EnhancedTestCase):
    """ Test send_email custom display headers so we can send cc'd addresses
    in the TO email (and hence track bounces) but still display them as CC'd.
    """

    def common_asserts(self, mailbox):
        """ Assertions that are common to the TestEmailDisplayHeaders tests. """
        for email in mailbox:
            self.assertEqual(email.extra_headers.get('dsp_to', None), None)
            self.assertEqual(email.extra_headers.get('cc', ''), '')

    def test_multi_recipients_w_cc(self):
        """ Test display headers for multiple "TO" emails with multiple "CC" 
        emails and display_all_recipients = True.
        """
        context = {'to_email': ['tony@hotmail.com', 'geraldini@hi.com'], 
                    'internal_cc': ['mary@toysrus.com', 'july@catty.com'],
                    'display_all_recipients': True}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 4)
        self.common_asserts(mail.outbox)
        for email in mail.outbox:
            email_found = False
            to_email = email.to[0]
            if to_email in context['to_email']:
                self.assertTrue(to_email in email.extra_headers['To'])
                self.assertTrue(to_email not in email.extra_headers['Cc'])
                email_found = True
            elif to_email in context['internal_cc']:
                self.assertTrue(to_email not in email.extra_headers['To'])
                self.assertTrue(to_email in email.extra_headers['Cc'])
                email_found = True
            self.assertTrue(email_found)

    def test_multi_emails_w_real_name(self):
        """ Test display of real name when there are multiple emails in the "TO"
        of this email. It should NOT try to convert to the real name.
        """
        context = {'to_email': ['tony@hotmail.com', 'geraldini@hi.com'], 
                   'real_name': 'George Washington', 
                   'display_all_recipients': True}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 2)
        self.common_asserts(mail.outbox)
        for email in mail.outbox:
            self.assertTrue(email.to[0] in email.extra_headers['To'])
            self.assertTrue('Washington' not in email.extra_headers['To'])
            self.assertTrue(email.to[0] 
                not in email.extra_headers.get('Cc', ''))
            self.assertTrue('Washington'
                not in email.extra_headers.get('Cc', ''))
    
    def test_single_to_w_real_name(self):
        """ Test display of real name when there is one email in the "TO"
        of this email. It should use the real name.
        """
        context = {'to_email': 'tony@hotmail.com', 
            'real_name': 'George Washington'}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 1)
        self.common_asserts(mail.outbox)
        self.assertEqual(mail.outbox[0].to[0], 'tony@hotmail.com')
        self.assertEqual(mail.outbox[0].extra_headers['To'], 
            'George Washington <tony@hotmail.com>')
        self.assertEqual('', mail.outbox[0].extra_headers.get('Cc', ''))
    
    def test_real_name_single_w_cc(self):
        """ Test display of real name when there is one "TO" email, but there
        are also CC'd emails, and we have a real name. It should send the real 
        name.
        """
        context = {'to_email': 'tony@hotmail.com', 
            'internal_cc': ['mary@toysrus.com'],
            'real_name': 'George Washington'}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 2)
        self.common_asserts(mail.outbox)
        for email in mail.outbox:
            email_found = False
            to_email = email.to[0]
            # Flag to display_all_recipients is False, CC key should be omitted.
            self.assertEqual(email.extra_headers.get('Cc', False), False)
            if to_email in context['to_email']:
                self.assertTrue(to_email in email.extra_headers['To'])
                email_found = True
            elif to_email in context['internal_cc']:
                self.assertTrue(to_email not in email.extra_headers['To'])
                email_found = True
            self.assertEqual(email_found, True)
            self.assertEqual(mail.outbox[0].extra_headers['To'], 
                'George Washington <tony@hotmail.com>')
    
    def test_prohibited_cc(self):
        """ Assert that when the settings.LIVE_EMAIL_DOMAINS list setting is
        populated and the CC'd email domain is in the list, that the email does
        not send.
        """
        settings.LIVE_EMAIL_DOMAINS = ['@10coupons.com']
        context = {'to_email': ['geraldini@10coupons.com'], 
                    'internal_cc': ['july@catty.com']}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 1)
        self.common_asserts(mail.outbox)
        self.assertEqual(mail.outbox[0].to[0], 'geraldini@10coupons.com')       
        settings.LIVE_EMAIL_DOMAINS = []
    
    def test_cc_signature(self):
        """ Assert when cc_signature_flag is True in the context, and 
        display_all_recipients is true, the email will CC the from address. 
        """
        context = {'to_email': ['geraldini@10coupons.com'], 
                    'cc_signature_flag': True, 
                    'signature_email': 'coupons@10coupons.com',
                    'display_all_recipients': True}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 2)
        self.common_asserts(mail.outbox)
        found_to_email = False
        found_from_email = False
        for email in mail.outbox:
            to_email = email.to[0]
            if to_email == 'geraldini@10coupons.com':
                found_to_email = True
                self.assertTrue('coupons@10coupons.com' 
                    in email.extra_headers['Cc'])
                self.assertTrue(to_email in email.extra_headers['To'])
            elif to_email == 'coupons@10coupons.com':
                found_from_email = True
                self.assertTrue('coupons@10coupons.com' 
                    in email.extra_headers['Cc'])
                self.assertTrue('coupons@10coupons.com' 
                    not in email.extra_headers['To'])
                self.assertTrue('geraldini@10coupons.com' 
                    in email.extra_headers['To'])       
        self.assertTrue(found_to_email)
        self.assertTrue(found_from_email)
    
    def test_cc_signature_no_display(self):
        """ Assert when cc_signature_flag is True in the context, and 
        display_all_recipients is False, the email be sent to the CC signature
        but wont appear as a CC in emails generated. 
        """
        context = {'to_email': ['geraldini@10coupons.com'], 
                    'cc_signature_flag': True, 
                    'signature_email': 'coupons@10coupons.com'}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 2)
        self.common_asserts(mail.outbox)
        cc_found = False
        for email in mail.outbox:
            to_email = email.to[0]
            self.assertEqual(email.extra_headers.get('Cc', False), False)
            if to_email == 'coupons@10coupons.com':
                cc_found = True       
        self.assertTrue(cc_found)

    def test_dsp_individual_recipients(self):
        """ Assert that when display_all_recipients is set to False in the 
        context (default), that we do not display all the "TO" emails in the 
        header, but make it appear as if they are the only one in the "TO"  
        (which they actually are). """
        context = {'to_email': ['tony@hotmail.com', 'anthony@yahoo.com'], 
            'internal_cc': 'july@catty.com'}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 3)
        self.common_asserts(mail.outbox)
        for email in mail.outbox:
            self.assertEqual(len(email.to), 1)
            self.assertEqual(email.extra_headers.get('To', None), None)

    def test_private_context(self):
        """ Assert when we call send_email that when the internal_cc key is
        appended to the context it is not applied to the context in the caller
        (and then passed back in to the next send_mail call. 
        """
        context = {'to_email': ['host@10coupons.com'], 
                    'cc_signature_flag': True, 
                    'signature_email': 'ad_rep@10coupons.com'}
        context, site = build_common_context(context)
        send_email(template='consumer_welcome', site=site, context=context)
        self.assertEqual(len(mail.outbox), 2)
        self.common_asserts(mail.outbox)
        self.assertEqual(context.get('internal_cc', None), None)